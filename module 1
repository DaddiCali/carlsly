//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Carlsly {

    constructor() {
        holder = msg.sender;
    }

    // public variables
    string public name = "Daddicali";
    string public symbol = "DC";
    uint public totalsupply = 0;
    address public holder;

    // emits events
    event Mint(address indexed to, uint amount);
    event Burn(address indexed from, uint amount);
    event Transfer(address indexed from, address indexed to, uint amount);

    // errors
    error InsufficientBalance(uint balance, uint withdrawAmount);

    // mapping variable
    mapping(address => uint) public balances;

    // modifiers
    modifier onlyholder {
        require(msg.sender == holder, "Only the holder can execute this function");
        _;
    }

    function mint(address _address, uint _value) public onlyholder {
        totalsupply += _value;
        balances[_address] += _value;
        emit Mint(_address, _value);
    }

    function burn(address _address, uint _value) public onlyholder {
        if (balances[_address] < _value) {
            revert InsufficientBalance({balance: balances[_address], withdrawAmount: _value});
        } else {
            totalsupply -= _value;
            balances[_address] -= _value;
            emit Burn(_address, _value);
        }
    }

    function transfer(address _receiver, uint _value) public {
        require(balances[msg.sender] >= _value, "The amount in the account must exceed the transferred value!");
        balances[msg.sender] -= _value;
        balances[_receiver] += _value;
        emit Transfer(msg.sender, _receiver, _value);
    }
}
